name: Package One .XRNX Each

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  package-and-release:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Create .xrnx packages without folder structure
      - name: Zip XRNX Packages
        run: |
          mkdir -p xrnx_packages
          for xrnx_dir in *.xrnx; do
            if [ -d "$xrnx_dir" ]; then
              folder_name=$(basename "$xrnx_dir" .xrnx)
              if [[ "$folder_name" == "kschzt."* ]]; then
                clean_name=${folder_name#kschzt.}
                output_name="com.kschzt.${clean_name}.xrnx"
              else
                output_name="com.kschzt.${folder_name}.xrnx"
              fi
              echo "Zipping $xrnx_dir into $output_name..."
              (cd "$xrnx_dir" && zip -r "../xrnx_packages/$output_name" .)
            fi
          done

      # Dynamically generate a tag name in the format yyyy-mm-dd_hh-mm-ss
      - name: Generate Tag Name
        run: echo "TAG_NAME=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      # Create and push a Git tag
      - name: Create and Push Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag $TAG_NAME
          git push origin $TAG_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create a GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      # Upload each asset individually
      - name: Upload Release Assets
        run: |
          for asset_path in xrnx_packages/*.xrnx; do
            asset_name=$(basename "$asset_path")
            echo "Uploading $asset_name..."
            gh release upload "${{ env.TAG_NAME }}" "$asset_path" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
